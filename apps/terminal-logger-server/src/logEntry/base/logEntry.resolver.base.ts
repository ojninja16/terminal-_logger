/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LogEntry } from "./LogEntry";
import { LogEntryCountArgs } from "./LogEntryCountArgs";
import { LogEntryFindManyArgs } from "./LogEntryFindManyArgs";
import { LogEntryFindUniqueArgs } from "./LogEntryFindUniqueArgs";
import { CreateLogEntryArgs } from "./CreateLogEntryArgs";
import { UpdateLogEntryArgs } from "./UpdateLogEntryArgs";
import { DeleteLogEntryArgs } from "./DeleteLogEntryArgs";
import { LogEntryService } from "../logEntry.service";
@graphql.Resolver(() => LogEntry)
export class LogEntryResolverBase {
  constructor(protected readonly service: LogEntryService) {}

  async _logEntriesMeta(
    @graphql.Args() args: LogEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LogEntry])
  async logEntries(
    @graphql.Args() args: LogEntryFindManyArgs
  ): Promise<LogEntry[]> {
    return this.service.logEntries(args);
  }

  @graphql.Query(() => LogEntry, { nullable: true })
  async logEntry(
    @graphql.Args() args: LogEntryFindUniqueArgs
  ): Promise<LogEntry | null> {
    const result = await this.service.logEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LogEntry)
  async createLogEntry(
    @graphql.Args() args: CreateLogEntryArgs
  ): Promise<LogEntry> {
    return await this.service.createLogEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LogEntry)
  async updateLogEntry(
    @graphql.Args() args: UpdateLogEntryArgs
  ): Promise<LogEntry | null> {
    try {
      return await this.service.updateLogEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LogEntry)
  async deleteLogEntry(
    @graphql.Args() args: DeleteLogEntryArgs
  ): Promise<LogEntry | null> {
    try {
      return await this.service.deleteLogEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
