/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LogEntryService } from "../logEntry.service";
import { LogEntryCreateInput } from "./LogEntryCreateInput";
import { LogEntry } from "./LogEntry";
import { LogEntryFindManyArgs } from "./LogEntryFindManyArgs";
import { LogEntryWhereUniqueInput } from "./LogEntryWhereUniqueInput";
import { LogEntryUpdateInput } from "./LogEntryUpdateInput";

export class LogEntryControllerBase {
  constructor(protected readonly service: LogEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LogEntry })
  async createLogEntry(
    @common.Body() data: LogEntryCreateInput
  ): Promise<LogEntry> {
    return await this.service.createLogEntry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        source: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LogEntry] })
  @ApiNestedQuery(LogEntryFindManyArgs)
  async logEntries(@common.Req() request: Request): Promise<LogEntry[]> {
    const args = plainToClass(LogEntryFindManyArgs, request.query);
    return this.service.logEntries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        source: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LogEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async logEntry(
    @common.Param() params: LogEntryWhereUniqueInput
  ): Promise<LogEntry | null> {
    const result = await this.service.logEntry({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        source: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LogEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLogEntry(
    @common.Param() params: LogEntryWhereUniqueInput,
    @common.Body() data: LogEntryUpdateInput
  ): Promise<LogEntry | null> {
    try {
      return await this.service.updateLogEntry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          source: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LogEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLogEntry(
    @common.Param() params: LogEntryWhereUniqueInput
  ): Promise<LogEntry | null> {
    try {
      return await this.service.deleteLogEntry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          source: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
