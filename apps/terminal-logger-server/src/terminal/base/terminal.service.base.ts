/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Terminal as PrismaTerminal } from "@prisma/client";

export class TerminalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TerminalCountArgs, "select">): Promise<number> {
    return this.prisma.terminal.count(args);
  }

  async terminals<T extends Prisma.TerminalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TerminalFindManyArgs>
  ): Promise<PrismaTerminal[]> {
    return this.prisma.terminal.findMany<Prisma.TerminalFindManyArgs>(args);
  }
  async terminal<T extends Prisma.TerminalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TerminalFindUniqueArgs>
  ): Promise<PrismaTerminal | null> {
    return this.prisma.terminal.findUnique(args);
  }
  async createTerminal<T extends Prisma.TerminalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TerminalCreateArgs>
  ): Promise<PrismaTerminal> {
    return this.prisma.terminal.create<T>(args);
  }
  async updateTerminal<T extends Prisma.TerminalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TerminalUpdateArgs>
  ): Promise<PrismaTerminal> {
    return this.prisma.terminal.update<T>(args);
  }
  async deleteTerminal<T extends Prisma.TerminalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TerminalDeleteArgs>
  ): Promise<PrismaTerminal> {
    return this.prisma.terminal.delete(args);
  }
}
