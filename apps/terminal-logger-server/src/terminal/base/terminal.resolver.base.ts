/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Terminal } from "./Terminal";
import { TerminalCountArgs } from "./TerminalCountArgs";
import { TerminalFindManyArgs } from "./TerminalFindManyArgs";
import { TerminalFindUniqueArgs } from "./TerminalFindUniqueArgs";
import { CreateTerminalArgs } from "./CreateTerminalArgs";
import { UpdateTerminalArgs } from "./UpdateTerminalArgs";
import { DeleteTerminalArgs } from "./DeleteTerminalArgs";
import { TerminalService } from "../terminal.service";
@graphql.Resolver(() => Terminal)
export class TerminalResolverBase {
  constructor(protected readonly service: TerminalService) {}

  async _terminalsMeta(
    @graphql.Args() args: TerminalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Terminal])
  async terminals(
    @graphql.Args() args: TerminalFindManyArgs
  ): Promise<Terminal[]> {
    return this.service.terminals(args);
  }

  @graphql.Query(() => Terminal, { nullable: true })
  async terminal(
    @graphql.Args() args: TerminalFindUniqueArgs
  ): Promise<Terminal | null> {
    const result = await this.service.terminal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Terminal)
  async createTerminal(
    @graphql.Args() args: CreateTerminalArgs
  ): Promise<Terminal> {
    return await this.service.createTerminal({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Terminal)
  async updateTerminal(
    @graphql.Args() args: UpdateTerminalArgs
  ): Promise<Terminal | null> {
    try {
      return await this.service.updateTerminal({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Terminal)
  async deleteTerminal(
    @graphql.Args() args: DeleteTerminalArgs
  ): Promise<Terminal | null> {
    try {
      return await this.service.deleteTerminal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
