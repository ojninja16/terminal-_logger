/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TerminalService } from "../terminal.service";
import { TerminalCreateInput } from "./TerminalCreateInput";
import { Terminal } from "./Terminal";
import { TerminalFindManyArgs } from "./TerminalFindManyArgs";
import { TerminalWhereUniqueInput } from "./TerminalWhereUniqueInput";
import { TerminalUpdateInput } from "./TerminalUpdateInput";

export class TerminalControllerBase {
  constructor(protected readonly service: TerminalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Terminal })
  async createTerminal(
    @common.Body() data: TerminalCreateInput
  ): Promise<Terminal> {
    return await this.service.createTerminal({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Terminal] })
  @ApiNestedQuery(TerminalFindManyArgs)
  async terminals(@common.Req() request: Request): Promise<Terminal[]> {
    const args = plainToClass(TerminalFindManyArgs, request.query);
    return this.service.terminals({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Terminal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async terminal(
    @common.Param() params: TerminalWhereUniqueInput
  ): Promise<Terminal | null> {
    const result = await this.service.terminal({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Terminal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTerminal(
    @common.Param() params: TerminalWhereUniqueInput,
    @common.Body() data: TerminalUpdateInput
  ): Promise<Terminal | null> {
    try {
      return await this.service.updateTerminal({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Terminal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTerminal(
    @common.Param() params: TerminalWhereUniqueInput
  ): Promise<Terminal | null> {
    try {
      return await this.service.deleteTerminal({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
